Parameters:
  LambdaCodeBucketName:
    Type: String
  LambdaCodeObjectKey:
    Type: String

Resources:
  KinesisDataStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: demo-kinesis-data-stream
      ShardCount: 1

  DemoLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: demo-kinesis-demo-lambda
      Handler: index.lambda_handler
      Role: !GetAtt DemoLambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeBucketName
        S3Key: !Ref LambdaCodeObjectKey
      Environment:
        Variables:
          STREAM_NAME: !Ref KinesisDataStream

  DemoLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "kinesis:PutRecord"
                Resource: !GetAtt KinesisDataStream.Arn

  KinesisFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: demo-kinesis-firehose-delivery-stream
      S3DestinationConfiguration:
        BucketARN: !GetAtt DemoFirehoseBucket.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
        Prefix: 'firehose-data/'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: UNCOMPRESSED

  DemoFirehoseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'demo-kinesis-demo-${AWS::CloudFormation::StackName}-bucket'
      AccessControl: Private

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: firehose-to-s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !GetAtt DemoFirehoseBucket.Arn
                  - !Sub '${DemoFirehoseBucket.Arn}/*'
